#include<stdio.h>
#include<stdlib.h>
struct data{
	int v1;
	int v2;
	int edge;
	//struct data *next;
};
typedef struct data da;
//st1 is for parents ,st for graph which is to be sorted
da st[100],st1[100];
int src1=1,src=0,count=0;
//returns the representative which is itself if single pt, else recursively search for parent's rep till source is reached
int check(int ver)
{

	if(st1[ver].v1==st1[ver].v2)
		return ver;
	else
		return check(st1[ver].v2);
}
//start from first, check the rep and if rep's not same make them same
void kur()
{
	int ver1,ver2,i,j,k,l;
	for(i=0;i<src;i++)
	{
		if(st[i].edge!=0)
		{
			ver1=st[i].v1;
			ver2=st[i].v2;
			ver1=check(ver1);
			ver2=check(ver2);
			if(ver1!=ver2)
			{
				st1[ver2].v1=ver2;
				st1[ver2].v2=ver2;
				st1[ver1].v1=ver1;
				st1[ver1].v2=ver2;
				count++;
				printf("%d %d\n",st[i].v1,st[i].v2);
			}
		}
	}
}
int main()
{
	int i,j,k,l,n;
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			st[src].v1=i+1;
			st[src].v2=j+1;
			scanf("%d",&l);
			st[src].edge=l;
			src++;
		}
		//each vertex is it's own parent initially
		st1[src1].v1=i+1;
		st1[src1].v2=i+1;
		st1[src1].edge=-1;
		src1++;
	}
	//sort the array on basis of edge weight
	for(i=0;i<src;i++)
	{
		if(st[i].edge!=0)
		{
			k=i;
			for(j=i+1;j<src;j++)
			{
				if(st[j].edge<st[k].edge&&st[j].edge!=0)
					k=j;
			}
			l=st[i].v1;
			st[i].v1=st[k].v1;
			st[k].v1=l;
			l=st[i].v2;
			st[i].v2=st[k].v2;
			st[k].v2=l;
			l=st[i].edge;
			st[i].edge=st[k].edge;
			st[k].edge=l;
		}
	}
	//call to kurskal's function
	kur();
	printf("%d\n",count);
	return 0;
}
